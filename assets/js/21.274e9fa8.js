(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{386:function(s,t,a){"use strict";a.r(t);var n=a(45),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"开始搭建-springcloud-脚手架"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#开始搭建-springcloud-脚手架"}},[s._v("#")]),s._v(" 开始搭建 springcloud 脚手架")]),s._v(" "),a("h2",{attrs:{id:"整合dubbo作为服务之间调用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#整合dubbo作为服务之间调用"}},[s._v("#")]),s._v(" 整合dubbo作为服务之间调用")]),s._v(" "),a("p",[s._v("Spring Cloud Alibaba 的出现，使用"),a("code",[s._v("Nacos")]),s._v("作为服务发现与注册，同时兼容使用"),a("code",[s._v("Feign")]),s._v("的"),a("code",[s._v("http")]),s._v("方式和使用"),a("code",[s._v("Dubbo")]),s._v("的"),a("code",[s._v("rpc")]),s._v("方式调用。")]),s._v(" "),a("p",[a("strong",[s._v("Spring Cloud 为什么需要 RPC")])]),s._v(" "),a("blockquote",[a("p",[s._v("在 Spring Cloud 构建的微服务系统中，大多数的开发者使用都是官方提供的 Feign 组件来进行内部服务通信，这种声明式的 HTTP 客户端使用起来非常的简洁、方便、优雅，并且和开发平台、语言无关，但是通常情况下，HTTP "),a("strong",[s._v("并不会开启 KeepAlive 功能，即当前连接为短连接")]),s._v("，短连接的缺点是每次请求都需要建立 TCP 连接，这使得其效率变的相当低下。")]),s._v(" "),a("p",[s._v("对外部提供 REST API 服务是一件非常好的事情，但是如果内部调用也是使用 HTTP 调用方式，就会显得显得性能低下，Spring Cloud 默认使用的 Feign 组件进行内部服务调用就是使用的 HTTP 协议进行调用，这时，我们如果内部服务使用 RPC 调用，对外使用 REST API，将会是一个非常不错的选择。")])]),s._v(" "),a("ol",[a("li",[a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1.")]),s._v("  git init "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 初始化一个本地Git仓库(把本地的文件夹初始化成一个Git可以管理的版本库)")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2.")]),s._v(" 注意:需让命令行终端处在当前文件目录下\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3.")]),s._v(" $ git "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("add")]),s._v(" README"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("md "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 把文件添加到本地版本库")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4.")]),s._v(" $ git "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("commit")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("m "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"first commit"')]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 把文件修改提交到仓库")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5.")]),s._v(" $ git remote "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("add")]),s._v(" origin git"),a("span",{pre:!0,attrs:{class:"token variable"}},[s._v("@github.com")]),s._v(":your name"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("repository name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("git "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 将本地仓库和你自己的远程仓库关联起来，origin是仓库的名字")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6.")]),s._v(" $ git pull origin master "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 先将关联后的github仓库中的代码pull下来，")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("7.")]),s._v(" $ git push "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("u origin master "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 将最新的修改推送到远程仓库 将本地仓库的文件推送到远程仓库，可能你的本地项目关联着几个仓库，")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8.")]),s._v(" 你可以根据仓库的名字git push origin master 将代码提交到不同仓库中，可以指定分支，\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("9.")]),s._v(" 第一次使用加上了"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("u参数，是推送内容并关联分支。\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10.")]),s._v(" 推送成功后就可以看到远程和本地的内容一模一样，下次只要本地作了提交，就可以通过命令：\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("11.")]),s._v(" $ git push origin master 把最新内容推送到Github上关联的远程仓库中去。\n\ngit pull origin master "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("--allow-unrelated-histories")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br")])])])])])}),[],!1,null,null,null);t.default=e.exports}}]);